// #if defined(LV_LVGL_H_INCLUDE_SIMPLE)
// #include "lvgl.h"
// #else
// #include "lvgl/lvgl.h"
// #endif


// #ifndef LV_ATTRIBUTE_MEM_ALIGN
// #define LV_ATTRIBUTE_MEM_ALIGN
// #endif

// #ifndef LV_ATTRIBUTE_IMG_TASMOTA_LOGO_64
// #define LV_ATTRIBUTE_IMG_TASMOTA_LOGO_64
// #endif

const uint8_t tasmota_logo_64_map[] = {
  0x00, 0x00, 0x00, 0xff, 	/*Color of index 0*/
  0x99, 0x99, 0x99, 0x66, 	/*Color of index 1*/
  0x66, 0x66, 0x66, 0x99, 	/*Color of index 2*/
  0xff, 0xff, 0xff, 0x00, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x00, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0b, 0xe0, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x2f, 0xf8, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xbf, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xe0, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x2f, 0xff, 0xff, 0xf8, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0xbf, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x2f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd0, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xbf, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x2f, 0xff, 0xff, 
  0xff, 0xff, 0xd0, 0x00, 0xbf, 0xff, 0xff, 0xd5, 0x57, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0x40, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x27, 0xff, 0xff, 0x80, 0x02, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x0b, 0xff, 0xfd, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xff, 0xe0, 0x00, 0xbf, 0xff, 
  0xff, 0xf8, 0x00, 0x0f, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x2f, 0xff, 
  0xff, 0xd0, 0x00, 0xbf, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xfe, 0x00, 0x0b, 0xff, 
  0xff, 0x80, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x02, 0xff, 
  0xfe, 0x00, 0x0b, 0xff, 0xf0, 0x00, 0x02, 0x60, 0x0b, 0x80, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0xbf, 
  0xf8, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x1f, 0xe0, 0x0b, 0xf4, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x2f, 
  0xd0, 0x00, 0xbf, 0xff, 0x80, 0x01, 0xff, 0xe0, 0x0b, 0xff, 0x40, 0x02, 0xff, 0xfe, 0x00, 0x07, 
  0x40, 0x00, 0xff, 0xfd, 0x00, 0x07, 0xff, 0xe0, 0x0b, 0xff, 0xd0, 0x00, 0x7f, 0xff, 0x80, 0x02, 
  0x40, 0x03, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe0, 0x0b, 0xff, 0xf4, 0x00, 0x3f, 0xff, 0xe0, 0x01, 
  0xd0, 0x2f, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xe0, 0x0b, 0xff, 0xfd, 0x00, 0x2f, 0xff, 0xf8, 0x0b, 
  0xf4, 0x3f, 0xff, 0xf0, 0x02, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xfe, 0x2f, 
  0xfd, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xc0, 0x0b, 0xff, 0xff, 0x7f, 
  0xff, 0xff, 0xff, 0xc0, 0x0b, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xd0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x2f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf8, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x2f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf4, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf4, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf4, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf4, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x2f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf8, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x2f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x40, 0x0f, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xd0, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xc0, 0x0b, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xd0, 0x01, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0x40, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0x00, 0xbf, 0xff, 0xe0, 0x0b, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x2f, 0xff, 0xe0, 0x0b, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfd, 0x00, 0x0b, 0xff, 0xe0, 0x0b, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xe0, 0x0b, 0xfd, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xe0, 0x0b, 0xfc, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xe0, 0x0b, 0xfc, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xe0, 0x0b, 0xfc, 0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x3f, 0xe0, 0x0b, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x0b, 0xfc, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xe0, 0x0b, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};

const lv_img_dsc_t tasmota_logo_64 = {
  { LV_IMG_CF_INDEXED_2BIT, 0, 0, 64, 64},
  1040,
  tasmota_logo_64_map
};

// typedef struct {
//     lv_img_header_t header;
//     uint32_t data_size;
//     const uint8_t * data;
// } lv_img_dsc_t;

// typedef struct {

//     uint32_t cf : 5;          /* Color format: See `lv_img_color_format_t`*/
//     uint32_t always_zero : 3; /*It the upper bits of the first byte. Always zero to look like a
//                                  non-printable character*/

//     uint32_t reserved : 2; /*Reserved to be used later*/

//     uint32_t w : 11; /*Width of the image map*/
//     uint32_t h : 11; /*Height of the image map*/
// } lv_img_header_t;